// <auto-generated />
using System;
using GroupCCP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GroupCCP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220207065245_07022022_0952")]
    partial class _07022022_0952
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupCCP.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GroupCCP.Models.Brands", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("GroupCCP.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<bool>("CompanyActive")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyCreateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CompanyNameAbbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("GroupId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<string>("AssignmentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<int>("StaffAssigned")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("LogId");

                    b.HasIndex("StaffAssigned");

                    b.ToTable("ComplaintAssignment");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintCorrectiveInfo", b =>
                {
                    b.Property<int>("CorrectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorrectiveId"), 1L, 1);

                    b.Property<string>("ComplaintSubComponent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectiveAction")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("CorrectiveComponentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectiveCustomerExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectiveDiagnosisTimeTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectiveInfoDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("CorrectiveOtherCostKSH")
                        .HasColumnType("real");

                    b.Property<float>("CorrectivePartsCostKSH")
                        .HasColumnType("real");

                    b.Property<string>("CorrectiveRectifyTimeTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("RouteCause")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("CorrectiveId");

                    b.HasIndex("CorrectiveComponentId");

                    b.HasIndex("LogId");

                    b.HasIndex("StaffId");

                    b.ToTable("ComplaintCorrectiveInfo");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintCustomerInfo", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCell")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CustomerCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ComplaintCustomerInfo");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintFollowUp", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowUpId"), 1L, 1);

                    b.Property<string>("FollowUpDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FollowUpTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("FollowUpId");

                    b.HasIndex("FollowUpTypeId");

                    b.HasIndex("LogId");

                    b.HasIndex("StaffId");

                    b.ToTable("ComplaintFollowUp");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintLogDetail", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("CustomerComplaint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CustomerRequest")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LogCustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("LogCustomerSatisfied")
                        .HasColumnType("bit");

                    b.Property<string>("LogKaizenAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<int>("LogMeansId")
                        .HasColumnType("int");

                    b.Property<string>("LogPreventiveAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("StatusClosedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusSubmitDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleOnSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogId");

                    b.HasIndex("LogCustomerId");

                    b.HasIndex("LogLevelId");

                    b.HasIndex("LogMeansId");

                    b.HasIndex("LogStatusId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StaffId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ComplaintLogDetail");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintLogStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("ComplaintLogStatus");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Status = "Open"
                        },
                        new
                        {
                            StatusId = 2,
                            Status = "Assigned"
                        },
                        new
                        {
                            StatusId = 3,
                            Status = "WIP"
                        },
                        new
                        {
                            StatusId = 4,
                            Status = "Resolved"
                        },
                        new
                        {
                            StatusId = 5,
                            Status = "Closed"
                        },
                        new
                        {
                            StatusId = 6,
                            Status = "Hold"
                        },
                        new
                        {
                            StatusId = 7,
                            Status = "Rejected"
                        });
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintProductComponent", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<string>("ProductComponent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.ToTable("ComplaintProductComponent");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintReceiveMeans", b =>
                {
                    b.Property<int>("MeansId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeansId"), 1L, 1);

                    b.Property<string>("Means")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MeansId");

                    b.ToTable("ComplaintReceiveMeans");

                    b.HasData(
                        new
                        {
                            MeansId = 1,
                            Means = "Email"
                        },
                        new
                        {
                            MeansId = 2,
                            Means = "Walk In"
                        },
                        new
                        {
                            MeansId = 3,
                            Means = "Call"
                        });
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintResponsibility", b =>
                {
                    b.Property<int>("ResponsibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponsibilityId"), 1L, 1);

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibilityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibilityPIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibilityReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponsibilityId");

                    b.HasIndex("LogId");

                    b.ToTable("ComplaintResponsibility");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintVehicleInfo", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiclePurchaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehilcleVIN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("ComplaintVehicleInfo");
                });

            modelBuilder.Entity("GroupCCP.Models.FollowUpCalls", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowUpId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("FollowUpMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("FollowUpTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FollowUpType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FollowUpId");

                    b.HasIndex("CompanyId");

                    b.ToTable("FollowUpCalls");
                });

            modelBuilder.Entity("GroupCCP.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GroupCCP.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"), 1L, 1);

                    b.Property<int>("LevelCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.HasIndex("LevelCategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("GroupCCP.Models.LevelCategory", b =>
                {
                    b.Property<int>("LevelCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelCategoryId"), 1L, 1);

                    b.Property<string>("CategorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("LevelCategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("LevelCategory");
                });

            modelBuilder.Entity("GroupCCP.Models.LevelMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"), 1L, 1);

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<bool>("MembershipActive")
                        .HasColumnType("bit");

                    b.Property<string>("MembershipRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StaffId");

                    b.ToTable("LevelMemberships");
                });

            modelBuilder.Entity("GroupCCP.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("StaffId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("GroupCCP.Models.OverdueReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"), 1L, 1);

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reminder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("ReminderId");

                    b.HasIndex("LogId");

                    b.HasIndex("StaffId");

                    b.ToTable("OverdueReminder");
                });

            modelBuilder.Entity("GroupCCP.Models.PermissionAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionAssignment");
                });

            modelBuilder.Entity("GroupCCP.Models.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 2,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "Close"
                        },
                        new
                        {
                            PermissionId = 3,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 4,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 5,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "Read"
                        },
                        new
                        {
                            PermissionId = 6,
                            Entity = "Complaint - Submitted Complaints",
                            Permission = "Export"
                        },
                        new
                        {
                            PermissionId = 63,
                            Entity = "FollowUp - Submitted Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 7,
                            Entity = "FollowUp - Submitted Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 8,
                            Entity = "FollowUp - Submitted Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 9,
                            Entity = "FollowUp - Submitted Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 64,
                            Entity = "Corrective - Submitted Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 10,
                            Entity = "Corrective - Submitted Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 11,
                            Entity = "Corrective - Submitted Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 12,
                            Entity = "Corrective - Submitted Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 65,
                            Entity = "Assignment - Submitted Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 13,
                            Entity = "Assignment - Submitted Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 14,
                            Entity = "Assignment - Submitted Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 15,
                            Entity = "Assignment - Submitted Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 16,
                            Entity = "Complaint - My Complaints",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 17,
                            Entity = "Complaint - My Complaints",
                            Permission = "Close"
                        },
                        new
                        {
                            PermissionId = 18,
                            Entity = "Complaint - My Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 19,
                            Entity = "Complaint - My Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 20,
                            Entity = "Complaint - My Complaints",
                            Permission = "Read"
                        },
                        new
                        {
                            PermissionId = 21,
                            Entity = "Complaint - My Complaints",
                            Permission = "Export"
                        },
                        new
                        {
                            PermissionId = 66,
                            Entity = "FollowUp - My Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 22,
                            Entity = "FollowUp - My Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 23,
                            Entity = "FollowUp - My Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 24,
                            Entity = "FollowUp - My Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 67,
                            Entity = "Corrective - My Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 25,
                            Entity = "Corrective - My Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 26,
                            Entity = "Corrective - My Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 27,
                            Entity = "Corrective - My Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 68,
                            Entity = "Assignment - My Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 28,
                            Entity = "Assignment - My Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 29,
                            Entity = "Assignment - My Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 30,
                            Entity = "Assignment - My Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 31,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 32,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "Close"
                        },
                        new
                        {
                            PermissionId = 33,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 34,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 35,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "Read"
                        },
                        new
                        {
                            PermissionId = 36,
                            Entity = "Complaint - Escallated Complaints",
                            Permission = "Export"
                        },
                        new
                        {
                            PermissionId = 69,
                            Entity = "FollowUp - Escallated Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 37,
                            Entity = "FollowUp - Escallated Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 38,
                            Entity = "FollowUp - Escallated Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 39,
                            Entity = "FollowUp - Escallated Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 70,
                            Entity = "Corrective - Escallated Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 40,
                            Entity = "Corrective - Escallated Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 41,
                            Entity = "Corrective - Escallated Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 42,
                            Entity = "Corrective - Escallated Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 71,
                            Entity = "Assignment - Escallated Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 43,
                            Entity = "Assignment - Escallated Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 44,
                            Entity = "Assignment - Escallated Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 45,
                            Entity = "Assignment - Escallated Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 46,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 47,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "Close"
                        },
                        new
                        {
                            PermissionId = 48,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 49,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 50,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "Read"
                        },
                        new
                        {
                            PermissionId = 51,
                            Entity = "Complaint - Level Down Complaints",
                            Permission = "Export"
                        },
                        new
                        {
                            PermissionId = 72,
                            Entity = "FollowUp - Level Down Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 52,
                            Entity = "FollowUp - Level Down Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 53,
                            Entity = "FollowUp - Level Down Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 54,
                            Entity = "FollowUp - Level Down Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 73,
                            Entity = "Corrective - Level Down Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 55,
                            Entity = "Corrective - Level Down Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 56,
                            Entity = "Corrective - Level Down Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 57,
                            Entity = "Corrective - Level Down Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 76,
                            Entity = "Assignment - Level Down Complaints",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 58,
                            Entity = "Assignment - Level Down Complaints",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 59,
                            Entity = "Assignment - Level Down Complaints",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 60,
                            Entity = "Assignment - Level Down Complaints",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 61,
                            Entity = "Complaint",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 62,
                            Entity = "Customer",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 160,
                            Entity = "Vehicle",
                            Permission = "Add"
                        },
                        new
                        {
                            PermissionId = 77,
                            Entity = "Admin - Home",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 78,
                            Entity = "Admin - Logs",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 79,
                            Entity = "Admin - Logs",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 80,
                            Entity = "Admin - Logs",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 81,
                            Entity = "Admin - Logs",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 82,
                            Entity = "Admin - Logs",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 83,
                            Entity = "Admin - Assignment",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 84,
                            Entity = "Admin - Assignment",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 85,
                            Entity = "Admin - Assignment",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 86,
                            Entity = "Admin - Assignment",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 87,
                            Entity = "Admin - FollowUp",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 88,
                            Entity = "Admin - FollowUp",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 89,
                            Entity = "Admin - FollowUp",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 90,
                            Entity = "Admin - FollowUp",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 91,
                            Entity = "Admin - Corrective",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 92,
                            Entity = "Admin - Corrective",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 93,
                            Entity = "Admin - Corrective",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 94,
                            Entity = "Admin - Corrective",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 95,
                            Entity = "Admin - Customer",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 96,
                            Entity = "Admin - Customer",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 97,
                            Entity = "Admin - Customer",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 98,
                            Entity = "Admin - Customer",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 99,
                            Entity = "Admin - Customer",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 100,
                            Entity = "Admin - Brands",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 101,
                            Entity = "Admin - Brands",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 102,
                            Entity = "Admin - Brands",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 103,
                            Entity = "Admin - Brands",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 104,
                            Entity = "Admin - Brands",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 105,
                            Entity = "Admin - ReceiveMeans",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 106,
                            Entity = "Admin - ReceiveMeans",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 107,
                            Entity = "Admin - ReceiveMeans",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 108,
                            Entity = "Admin - ReceiveMeans",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 109,
                            Entity = "Admin - ReceiveMeans",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 110,
                            Entity = "Admin - FollowUpTypes",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 111,
                            Entity = "Admin - FollowUpTypes",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 112,
                            Entity = "Admin - FollowUpTypes",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 113,
                            Entity = "Admin - FollowUpTypes",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 114,
                            Entity = "Admin - FollowUpTypes",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 115,
                            Entity = "Admin - Levels",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 116,
                            Entity = "Admin - Levels",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 117,
                            Entity = "Admin - Levels",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 118,
                            Entity = "Admin - Levels",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 119,
                            Entity = "Admin - Levels",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 120,
                            Entity = "Admin - LevelCategories",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 121,
                            Entity = "Admin - LevelCategories",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 122,
                            Entity = "Admin - LevelCategories",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 123,
                            Entity = "Admin - LevelCategories",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 124,
                            Entity = "Admin - LevelCategories",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 125,
                            Entity = "Admin - StaffAccounts",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 126,
                            Entity = "Admin - StaffAccounts",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 127,
                            Entity = "Admin - StaffAccounts",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 128,
                            Entity = "Admin - StaffAccounts",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 129,
                            Entity = "Admin - StaffAccounts",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 130,
                            Entity = "Admin - LevelMemberships",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 131,
                            Entity = "Admin - LevelMemberships",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 132,
                            Entity = "Admin - LevelMemberships",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 133,
                            Entity = "Admin - LevelMemberships",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 134,
                            Entity = "Admin - LevelMemberships",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 135,
                            Entity = "Admin - RoleAssignments",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 136,
                            Entity = "Admin - RoleAssignments",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 137,
                            Entity = "Admin - RoleAssignments",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 138,
                            Entity = "Admin - RoleAssignments",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 139,
                            Entity = "Admin - RoleAssignments",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 140,
                            Entity = "Admin - PermissionAssignments",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 141,
                            Entity = "Admin - PermissionAssignments",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 142,
                            Entity = "Admin - PermissionAssignments",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 143,
                            Entity = "Admin - PermissionAssignments",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 144,
                            Entity = "Admin - PermissionAssignments",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 145,
                            Entity = "Admin - Timelines",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 146,
                            Entity = "Admin - Timelines",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 147,
                            Entity = "Admin - Timelines",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 148,
                            Entity = "Admin - Timelines",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 149,
                            Entity = "Admin - Timelines",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 150,
                            Entity = "Admin - Companies",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 151,
                            Entity = "Admin - Companies",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 152,
                            Entity = "Admin - Companies",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 153,
                            Entity = "Admin - Companies",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 154,
                            Entity = "Admin - Companies",
                            Permission = "View"
                        },
                        new
                        {
                            PermissionId = 155,
                            Entity = "Admin - Roles",
                            Permission = "List"
                        },
                        new
                        {
                            PermissionId = 156,
                            Entity = "Admin - Roles",
                            Permission = "Edit"
                        },
                        new
                        {
                            PermissionId = 157,
                            Entity = "Admin - Roles",
                            Permission = "Delete"
                        },
                        new
                        {
                            PermissionId = 158,
                            Entity = "Admin - Roles",
                            Permission = "Create"
                        },
                        new
                        {
                            PermissionId = 159,
                            Entity = "Admin - Roles",
                            Permission = "View"
                        });
                });

            modelBuilder.Entity("GroupCCP.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"), 1L, 1);

                    b.Property<float>("PriorityCloseDate")
                        .HasColumnType("real");

                    b.Property<string>("PriorityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            PriorityCloseDate = 4f,
                            PriorityName = "Critical"
                        },
                        new
                        {
                            PriorityId = 2,
                            PriorityCloseDate = 8f,
                            PriorityName = "High"
                        },
                        new
                        {
                            PriorityId = 3,
                            PriorityCloseDate = 24f,
                            PriorityName = "Normal"
                        },
                        new
                        {
                            PriorityId = 4,
                            PriorityCloseDate = 48f,
                            PriorityName = "Low"
                        },
                        new
                        {
                            PriorityId = 5,
                            PriorityCloseDate = 0f,
                            PriorityName = "Extremely Low"
                        });
                });

            modelBuilder.Entity("GroupCCP.Models.RoleAssignment", b =>
                {
                    b.Property<int>("RoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleAssignmentId"), 1L, 1);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("RoleAssignmentId");

                    b.HasIndex("RoleID");

                    b.HasIndex("StaffId");

                    b.ToTable("RoleAssignment");
                });

            modelBuilder.Entity("GroupCCP.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GroupCCP.Models.StaffAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffAccount");
                });

            modelBuilder.Entity("GroupCCP.Models.Timelines", b =>
                {
                    b.Property<int>("TimeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeLineId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("OverdueAssignedEscallate")
                        .HasColumnType("bit");

                    b.Property<float>("OverdueAssignedHrs")
                        .HasColumnType("real");

                    b.Property<float>("OverdueAssignedReminderHrs")
                        .HasColumnType("real");

                    b.Property<float>("OverdueClosedEscallate")
                        .HasColumnType("real");

                    b.Property<float>("OverdueResolvedClosedHrs")
                        .HasColumnType("real");

                    b.Property<float>("OverdueResolvedClosedReminderHrs")
                        .HasColumnType("real");

                    b.Property<bool>("OverdueResolvedEscallate")
                        .HasColumnType("bit");

                    b.Property<float>("OverdueResolvedHrs")
                        .HasColumnType("real");

                    b.Property<float>("OverdueResolvedReminderHrs")
                        .HasColumnType("real");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.HasKey("TimeLineId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PriorityId");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupCCP.Models.Brands", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("Brands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GroupCCP.Models.Company", b =>
                {
                    b.HasOne("GroupCCP.Models.Group", "Group")
                        .WithMany("Companies")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintAssignment", b =>
                {
                    b.HasOne("GroupCCP.Models.ComplaintLogDetail", "Log")
                        .WithMany("Assignments")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "Staff")
                        .WithMany("Assignments")
                        .HasForeignKey("StaffAssigned")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Log");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintCorrectiveInfo", b =>
                {
                    b.HasOne("GroupCCP.Models.ComplaintProductComponent", "ComplaintProductComponent")
                        .WithMany("ComplaintCorrectiveInfos")
                        .HasForeignKey("CorrectiveComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ComplaintLogDetail", "Log")
                        .WithMany("Correctives")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "StaffAccount")
                        .WithMany("ComplaintCorrectiveInfos")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplaintProductComponent");

                    b.Navigation("Log");

                    b.Navigation("StaffAccount");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintCustomerInfo", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintFollowUp", b =>
                {
                    b.HasOne("GroupCCP.Models.FollowUpCalls", "FollowUpCalls")
                        .WithMany("ComplaintFollowUps")
                        .HasForeignKey("FollowUpTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ComplaintLogDetail", "Log")
                        .WithMany("FollowUps")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "Staff")
                        .WithMany("FollowUps")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowUpCalls");

                    b.Navigation("Log");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintLogDetail", b =>
                {
                    b.HasOne("GroupCCP.Models.ComplaintCustomerInfo", "Customers")
                        .WithMany("Logs")
                        .HasForeignKey("LogCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.Level", "Level")
                        .WithMany("Logs")
                        .HasForeignKey("LogLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ComplaintReceiveMeans", "Means")
                        .WithMany("Logs")
                        .HasForeignKey("LogMeansId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ComplaintLogStatus", "Status")
                        .WithMany("Logs")
                        .HasForeignKey("LogStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.Priority", "Priority")
                        .WithMany("ComplaintLogDetails")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "StaffAccount")
                        .WithMany("ComplaintLogDetails")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ComplaintVehicleInfo", "ComplaintVehicleInfo")
                        .WithMany("Logs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplaintVehicleInfo");

                    b.Navigation("Customers");

                    b.Navigation("Level");

                    b.Navigation("Means");

                    b.Navigation("Priority");

                    b.Navigation("StaffAccount");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintResponsibility", b =>
                {
                    b.HasOne("GroupCCP.Models.ComplaintLogDetail", "Log")
                        .WithMany("ComplaintResponsibilities")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintVehicleInfo", b =>
                {
                    b.HasOne("GroupCCP.Models.Brands", "Brands")
                        .WithMany("complaintVehicleInfos")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("GroupCCP.Models.FollowUpCalls", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("FollowUps")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GroupCCP.Models.Level", b =>
                {
                    b.HasOne("GroupCCP.Models.LevelCategory", "LevelCategory")
                        .WithMany("Levels")
                        .HasForeignKey("LevelCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.Level", "ParentLevel")
                        .WithMany("ChildLevels")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LevelCategory");

                    b.Navigation("ParentLevel");
                });

            modelBuilder.Entity("GroupCCP.Models.LevelCategory", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("LevelCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.LevelCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("GroupCCP.Models.LevelMembership", b =>
                {
                    b.HasOne("GroupCCP.Models.Level", "Level")
                        .WithMany("LevelMemberships")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "Staff")
                        .WithMany("LevelMemberships")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GroupCCP.Models.Notification", b =>
                {
                    b.HasOne("GroupCCP.Models.StaffAccount", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GroupCCP.Models.OverdueReminder", b =>
                {
                    b.HasOne("GroupCCP.Models.ComplaintLogDetail", "ComplaintLogDetail")
                        .WithMany("OverdueReminders")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "StaffAccount")
                        .WithMany("OverdueReminders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplaintLogDetail");

                    b.Navigation("StaffAccount");
                });

            modelBuilder.Entity("GroupCCP.Models.PermissionAssignment", b =>
                {
                    b.HasOne("GroupCCP.Models.Permissions", "Permissions")
                        .WithMany("Assignments")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.Roles", "Roles")
                        .WithMany("Assignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GroupCCP.Models.RoleAssignment", b =>
                {
                    b.HasOne("GroupCCP.Models.Roles", "Roles")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.StaffAccount", "Staff")
                        .WithMany("RolesAssignments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GroupCCP.Models.Roles", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GroupCCP.Models.StaffAccount", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ApplicationUser", "User")
                        .WithMany("StaffAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupCCP.Models.Timelines", b =>
                {
                    b.HasOne("GroupCCP.Models.Company", "Company")
                        .WithMany("Timelines")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.Priority", "Priority")
                        .WithMany("Timelines")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GroupCCP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GroupCCP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupCCP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GroupCCP.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupCCP.Models.ApplicationUser", b =>
                {
                    b.Navigation("StaffAccounts");
                });

            modelBuilder.Entity("GroupCCP.Models.Brands", b =>
                {
                    b.Navigation("complaintVehicleInfos");
                });

            modelBuilder.Entity("GroupCCP.Models.Company", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Customers");

                    b.Navigation("FollowUps");

                    b.Navigation("LevelCategories");

                    b.Navigation("Roles");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintCustomerInfo", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintLogDetail", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ComplaintResponsibilities");

                    b.Navigation("Correctives");

                    b.Navigation("FollowUps");

                    b.Navigation("OverdueReminders");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintLogStatus", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintProductComponent", b =>
                {
                    b.Navigation("ComplaintCorrectiveInfos");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintReceiveMeans", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GroupCCP.Models.ComplaintVehicleInfo", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GroupCCP.Models.FollowUpCalls", b =>
                {
                    b.Navigation("ComplaintFollowUps");
                });

            modelBuilder.Entity("GroupCCP.Models.Group", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("GroupCCP.Models.Level", b =>
                {
                    b.Navigation("ChildLevels");

                    b.Navigation("LevelMemberships");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("GroupCCP.Models.LevelCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("GroupCCP.Models.Permissions", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("GroupCCP.Models.Priority", b =>
                {
                    b.Navigation("ComplaintLogDetails");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("GroupCCP.Models.Roles", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("GroupCCP.Models.StaffAccount", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ComplaintCorrectiveInfos");

                    b.Navigation("ComplaintLogDetails");

                    b.Navigation("FollowUps");

                    b.Navigation("LevelMemberships");

                    b.Navigation("Notifications");

                    b.Navigation("OverdueReminders");

                    b.Navigation("RolesAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
